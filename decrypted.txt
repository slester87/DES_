package com.SkipLester_CSS527_Assignment_1_DES;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

/**
 * Created by shaun on 10/14/2015.
 */
public class Helper {
    static final int[] IP = {
            58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17,  9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7
    };
    static final int[] INVP = {
            40, 8, 48, 16, 56, 24, 64, 32,
            39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30,
            37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28,
            35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26,
            33, 1, 41,  9, 49, 17, 57, 25
    };
    static final int[] E = { //Expansion Permutation
            32,  1,  2,  3,  4,  5,
            4,  5,  6,  7,  8,  9,
            8,  9, 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32,  1
    };
    static final int[] P = {
            16,  7, 20, 21,
            29, 12, 28, 17,
            1, 15, 23, 26,
            5, 18, 31, 10,
            2,  8, 24, 14,
            32, 27,  3,  9,
            19, 13, 30,  6,
            22, 11,  4, 25
    };



    /**
     * Todo: REFACTOR AS A 8x 16x4 sboxes and REFACTOR Sbox lookup
     */
    static final int[] S = {
            14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7, // S1
            0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
            4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
            15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
            15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10, // S2
            3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
            0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
            13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
            10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8, // S3
            13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
            13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
            1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
            7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15, // S4
            13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
            10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
            3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
            2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9, // S5
            14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
            4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
            11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
            12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11, // S6
            10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
            9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
            4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
            4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1, // S7
            13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
            1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
            6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
            13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7, // S8
            1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
            7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
            2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
    };

    public static byte[] cipher(byte[] theMessage, byte[][] roundKeys, String encryptOrDecrypt) throws Exception{
        //check the message is padded correctly
        if(theMessage.length < 8){ //expecting 64 bit blocks
            throw new Exception("Message is less than 64 bits. Use PKCS #5 padding");
        }
        theMessage = Helper.selectBits(theMessage,IP); //Initial Permutation
        int blockSize = IP.length;
        byte[] l = Helper.selectBits(theMessage,0, blockSize/2);
        byte[] r = Helper.selectBits(theMessage,blockSize/2, blockSize/2);

        for(int i = 0; i < roundKeys.length; i++){
            byte[] rightBackup = r;
            r = Helper.selectBits(r, E); //Expansion
            if(encryptOrDecrypt.equalsIgnoreCase("encrypt")){
                r = Helper.doXORonBytes(r,roundKeys[i]); //Xor with the sub key
            }else{//decrypting
                r = Helper.doXORonBytes(r,roundKeys[roundKeys.length-i-1]);
            }
            r = Helper.substitution6x4(r); //Substitution
            r = Helper.selectBits(r, P); //Permutation
            r = doXORonBytes(l,r); //XOR with left half from last round
            l = rightBackup; //Left becomes last round's right
        }
        byte[] lr = Helper.concatenateBits(r, blockSize/2, l, blockSize/2);
        lr = Helper.selectBits(lr, INVP); //Inverse Permutation
        return lr;
    }


    /*
     * Todo: REFACTOR me s.t. I more closely match assignment's equation
     */
    public static byte[] substitution6x4(byte[] in) {
        in = splitBytes(in,6); // Splitting byte[] into 6-bit blocks
        byte[] out = new byte[in.length/2];
        int lhByte = 0;
        for (int b=0; b< in.length; b++) { // Should be sub-blocks
            byte valByte = in[b];
            int r = 2*(valByte>>7&0x0001)+(valByte>>2&0x0001); // 1 and 6 as given by Canvas
            int c = valByte>>3&0x000F; // Middle 4 bits
            int hByte = S[64*b+16*r+c]; // 4 bits (half byte) output
            if (b%2==0) lhByte = hByte; // Left half byte
            else out[b/2] = (byte) (16*lhByte + hByte);
        }
        return out;
    }

    /*
     * Todo: Review; possibly refactor
     */
    private static byte[] splitBytes(byte[] in, int len) {
        int numOfBytes = (8*in.length-1)/len + 1;
        byte[] out = new byte[numOfBytes];
        for (int i=0; i<numOfBytes; i++) {
            for (int j=0; j<len; j++) {
                int val = getBit(in, len*i+j);
                setBit(out,8*i+j,val);
            }
        }
        return out;
    }

    public static byte[] readBytes(String in) throws Exception{
        FileInputStream fis = new FileInputStream(in);
        int numOfBytes = fis.available();
        byte[] buffer = new byte[numOfBytes];
        fis.read(buffer);
        fis.close();
        return buffer;
    }
    /*
    * Implements PKCS #5
     */
    public static byte[] readBytes(File in) throws FileNotFoundException{
        FileInputStream fis = new FileInputStream(in);
        byte[] buffer = new byte[8];
        try {
            int bytesRead = fis.read(buffer);
            switch(bytesRead){
                case 1: bytesRead = 1;
                    buffer[1] = 07;
                    buffer[2] = 07;
                    buffer[3] = 07;
                    buffer[4] = 07;
                    buffer[5] = 07;
                    buffer[6] = 07;
                    buffer[7] = 07;
                    break;
                case 2: bytesRead = 2;
                    buffer[2] = 06;
                    buffer[3] = 06;
                    buffer[4] = 06;
                    buffer[5] = 06;
                    buffer[6] = 06;
                    buffer[7] = 06;
                    break;
                case 3: bytesRead = 3;
                    buffer[3] = 05;
                    buffer[4] = 05;
                    buffer[5] = 05;
                    buffer[6] = 05;
                    buffer[7] = 05;
                    break;
                case 4: bytesRead = 4;
                    buffer[4] = 04;
                    buffer[5] = 04;
                    buffer[6] = 04;
                    buffer[7] = 04;
                    break;
                case 5: bytesRead = 5;
                    buffer[5] = 03;
                    buffer[6] = 03;
                    buffer[7] = 03;
                    break;
                case 6: bytesRead = 6;
                    buffer[6] = 02;
                    buffer[7] = 02;
                    break;
                case 7: bytesRead = 7;
                    buffer[7] = 01;
                    break;
                case 8: bytesRead = 8;
                    break;
            }
            fis.close();
        }catch(Exception e){
            e.printStackTrace();
        }
        return buffer;

    }


    public static void writeBytes(byte[] data, String out) throws Exception{
            FileOutputStream fos = new FileOutputStream(out);
            fos.write(data);
            fos.close();
    }

    public static byte[] selectBits(byte[] in, int pos, int len) {
        int numOfBytes = (len-1)/8 + 1;
        byte[] out = new byte[numOfBytes];
        for (int i=0; i<len; i++) {
            int val = getBit(in,pos+i);
            setBit(out,i,val);
        }
        return out;
    }

    public static byte[] concatenateBits(byte[] a, int aLen, byte[] b,int bLen) {
        int numOfBytes = (aLen+bLen-1)/8 + 1;
        byte[] out = new byte[numOfBytes];
        int j = 0;
        for (int i=0; i<aLen; i++) {
            int val = getBit(a,i);
            setBit(out,j,val);
            j++;
        }
        for (int i=0; i<bLen; i++) {
            int val = getBit(b,i);
            setBit(out,j,val);
            j++;
        }
        return out;
    }
    public static byte[] rotateLeft(byte[] in, int len, int step) {
        int numOfBytes = (len-1)/8 + 1;
        byte[] out = new byte[numOfBytes];
        for (int i=0; i<len; i++) {
            int val = getBit(in,(i+step)%len);
            setBit(out,i,val);
        }
        return out;
    }

    public static byte[] selectBits(byte[] in, int[] map) {
        int numOfBytes = (map.length-1)/8 + 1;
        byte[] out = new byte[numOfBytes];
        for (int i=0; i<map.length; i++) {
            int val = getBit(in,map[i]-1);
            setBit(out,i,val);
        }
        return out;
    }  

    public static int getBit(byte[] data, int position){
        int posByte = position / 8;
        int posBit = position % 8;
        byte valByte = data[posByte];
        int valInt = valByte>>(8-(posBit + 1)) & 0x0001;
        return valInt;
    }

    public static void setBit(byte[] data, int pos, int val) {
        int posByte = pos/8;
        int posBit = pos%8;
        byte oldByte = data[posByte];
        oldByte = (byte) (((0xFF7F>>posBit) & oldByte) & 0x00FF);
        byte newByte = (byte) ((val<<(8-(posBit+1))) | oldByte);
        data[posByte] = newByte;
    }

    public static void printBytes(byte[] data, String name){
        System.out.println("");
        System.out.println(name + ":");
        for(int i = 0; i< data.length; i++){
            System.out.print(byteToBits(data[i]) + " ");
        }
        System.out.println();
    }
    public static String byteToBits(byte b) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 8; i++) {
            //using bitshift right, we will get the bits of the byte
            // by logical and with 1 at each shift
            buf.append((int) (b >> (8 - (i + 1)) & 0x0001));
        }
            return buf.toString();
    }
    public static byte[] doXORonBytes(byte[] a, byte[] b){
        byte[] XORResult = new byte[a.length];
        for(int i = 0; i < a.length; i++){
            //recall that ^ is the bitwise XOR operator in java
            XORResult[i] = (byte) (a[i] ^ b[i]);
        }
        return  XORResult;
    }
}
